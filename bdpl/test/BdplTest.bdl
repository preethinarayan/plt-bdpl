/////////////////////////////
// Test program for BDPL   //
/////////////////////////////

//
// Some basic tests
// Test for array
// Test for basic types
// Test for comma separated list
// Test for decimal, binary and hex numbers
// Test for valid-ok-nok construct in various forms
//
bit[4] name;
char a,b,c valid {10};
char name valid {1,2,3,4} ok {} nok {name = 0x234;};
char name valid {1,2};
char name valid {0} ok{};
char name valid {0x4A .. 0x7B} nok {projects = 3;};

//
// Test for range
//
byte[2] array valid {0b1110010101010..0b11110000101010} optional on name;

//
// Test for optional construct
//
byte[2] array optional on ~name;
byte[4] array optional on name;

//
// Test assignment statement
//
name = 0x3AC;

//
// Test declaration statement
//
byte names;

//
// Test empty struct
//
struct filename{
}a;

//
// Test nested struct and undefined size array
// Test comment
// Test read and write statements as in Hello World Program
struct file{
  char[*] morenames;
  struct nested_file{
    char[34] nested_morenames;
  }a;
  byte lastname;
}a;  // bad part of line
read("/home/usr/bin/hello.txt",file_struct);
write(stdout,file_struct);


char[*] badname ;
a=a.b.c[*][10..34].d.e.f[ a.b.c.d[10]..a.b.c].c[*][*]; //arbitary expression
a=a[10][12,34..56,65]; // array of ranges
a=a.b.c[12,34..56,65][a.b.c  .. c.d.e[45,55..65,0] * 23 ]; // array indexed by expression with objects
a=a.b.c[12,34..56,65][a.b.c+56-23%45..c.d.e[45,55..65,0]*23]; // array indexed by expression with objects
a=a+34;
a=a.b.c[12,34..56,65][a.b.c]; 
//make it fail
a=a/b; // life,it seems, isnt without a sense of irony


