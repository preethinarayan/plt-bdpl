int tagsize;
int framesize;

struct MP3_FILE
{
	struct MP3_ID3
	{
		byte[3]	id;
		byte[2]	version;
		byte flags;
		byte[4] size satisfies {1<5} then {
			tagsize = size[0];
			tagsize = ((tagsize << 7) | (size[1] & 0x7F));
			tagsize = ((tagsize << 7) | (size[2] & 0x7F));
			tagsize = ((tagsize << 7) | (size[3] & 0x7F));
		};
	}mp3_id3;

	struct FRAME
	{
		byte[4] frameheader_id satisfies {frameheader_id[0] == 0x54} then {
			framesize = 0;
		}else{		};
		byte[4] size satisfies {1} then {
			framesize = size[0];
			framesize = ((framesize << 8) | (size[1] & 0xFF));
			framesize = ((framesize << 8) | (size[2] & 0xFF));
			framesize = ((framesize << 8) | (size[3] & 0xFF));
		};
		byte[2] flags;
    	struct TEXT_FRAME
	    {
		    byte encoding;
		    byte[framesize-2] string satisfies {frameheader_id[0] == 0x54} then {
				if(frameheader_id[1] == 0x49) {
					print("Song Title: ");printstring(string);print("::");
				}
				if(frameheader_id[1] == 0x41) {
					print("Album: ");printstring(string);print("::");
				}
				if(frameheader_id[1] == 0x43 && frameheader_id[2] == 0x4F && frameheader_id[3] == 0x4E) {
					print("Genre: ");printstring(string);print("::");
				}
				if(frameheader_id[1] == 0x50 && frameheader_id[2] == 0x45 && frameheader_id[3] == 0x32) {
					print("Performer: ");printstring(string);print("::");
				}
				if(frameheader_id[1] == 0x43 && frameheader_id[2] == 0x4F && frameheader_id[3] == 0x4D) {
					print("Composer: ");printstring(string);print("::");
				}
			};
			byte empty;
	    }text;
    }[*]textFrame;
	byte[*] data;
}mp3_file;

file "x:/test/ChaleChalo.mp3" inp_file;
read(inp_file,mp3_file);

